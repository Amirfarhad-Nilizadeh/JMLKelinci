import org.junit.Test;
import static org.junit.Assert.assertTrue;
import static org.junit.Assert.assertFalse;
import java.util.Arrays;


public class JUnitInverse {

	@Test
	public void test() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 172641612, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669};

		int[] arr2 = {1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1762282061, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}

	@Test
	public void test1() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {1701603694, 1667844736, 108, 1770414953, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667591273, 1852001612, 1264937290, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264910441, 1852008778, 1296845569, 6909539, 1765887308, 1264938089, 1852008778, 1296845669, 1818848867, -2041950900, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1828716415, -11907764, 1264938089, 1852008778, 1296845679, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, -1756607643, 443117155, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1769996288, 4941164, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1665885548, 1768842089, 1246579787, 1701603694, 1667844685, 1280009582, 1667844685, 1280009580, 1768842089, 1246625791};

		int[] arr2 = {26990, 1667844685, 1280009567, 1768842089, 1246579787, 1701603694, 1667844685, 1281123692, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768816640, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1735158126, 1667844685, 1289871841, -505290271, -505290271, -505290271, -505290271, -505290271, -505290271, -505290271, -515152532, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603712, 1667844685, 1280009580, 1768842089, 172641612, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1302809445, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1498172261, 1818848867, 1766477132, 1264938089, 1852008778, 8407909, 1818848867, 1766477132, 1264938089, 1852008778, 1296845669, 1818848867};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}

	@Test
	public void test2() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {1701603694, 1667844736, 108, 1770414953, 1246579787, 1701603694, 1667844685, 1280009580, 1047421801, 1246579787, 1701603694, 1675127913, 1852001612, 1264937290, 1296845669, 1813978930, 522133279, 522133279, 522133279, 522133279, 522133279, 520703308, 1264910441, 1852008778, 1296845569, 6909539, 1765887308, 1264938089, 1852008778, 1296845669, 1818848867, -2041950900, 100663045, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1308576333, 1280009580, 1768842089, 1246579787, 1869375854, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1251429451, 1696229742, 1667844685, 1280009580, 1768842089, 1246579712, 33554542, 1667858432, 19301, 1818848867, 1766477132, 1264938112, 1852008778, 1296845669, 1818848867, 1766477132, 1264938089, 1852008906, 1296845669, 1818848867, 1766477132, 1264938089, 1852008778, 1298352997, 1818848867, 1766477132, 1264938089, 1852008778, 1296846437, 1852008778, 1296845650, 1818848867, 1766477311, -16777111, 1852008778};

		int[] arr2 = {1296845669, 1600745059, 1766477132, 1264938089, 1852008778, 1296846437, 1766477132, 1264938089, 1852008778, 1298950510, 1667844685, 1280009580, 1768842089, 1246317643, 1701603694, 19021, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280010092, 1768842089, 1246579937, -505290271, 188897, -505290271, -505290271, -505290271, -505290271, -505290271, -505290421, 1701603694, 1667844685, 1280009580, 1768842089, 1347243083, 1701603694, 1667844685, 1280009580, 1770021737, 1246579799, 1701603694, 1667828298, 1296845669, 1818848867, 1766477166, 1667844685, 1280009580, 1768842089, 1246603083, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694, 1667844685, 1280009580, 1769300841, 1246579787, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701669230, 1667844685, 1280009580, 1768842089, 1247366219, 1701603694, 1667844685, 1280009580, 1768842089, 1241546827, 1701603694, 1667844685, 1280009580, 1768842089, 1246579787, 1701603694};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if(arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}

	@Test
	public void test3() {
		Inverse a = new Inverse();
		boolean flag = true;

		int[] arr1 = {};

		int[] arr2 = {};

		boolean b = a.Inverse(arr1, arr2);

		if (arr1.length != arr2.length)
			assertTrue("Their length is differnt and they cannot be inverse", b == false);
		else {
			for (int i = 0; i < arr1.length; i++){
				if (arr2[arr1.length-1-i] != arr1[i]){
					flag = false;
					break;
				}
			}
			assertTrue(b == flag);
		}
	}
}
